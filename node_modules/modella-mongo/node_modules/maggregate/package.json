{
  "name": "maggregate",
  "version": "0.1.0",
  "description": "Mongo aggregation builder",
  "main": "index.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/rschmukler/maggregate"
  },
  "keywords": [
    "mongo",
    "aggregate",
    "builder",
    "mquery"
  ],
  "author": {
    "name": "Ryan Schmukler",
    "email": "ryan@slingingcode.com",
    "url": "http://slingingcode.com/"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/rschmukler/maggregate/issues"
  },
  "devDependencies": {
    "expect.js": "~0.2.0"
  },
  "readme": "# Maggregate\nSimple aggregation pipeline builder for MongoDb. Inspired by the eloquent\n[aheckmann/mquery](https://github.com/aheckmann/mquery).\n\n## Example Usage\n\n    var Maggregate = require('maggregate');\n\n    require('mongodb').connect(uri, function (err, db) {\n      if (err) return handleError(err);\n\n      // get a collection\n      var collection = db.collection('artists');\n\n      // Create an instance of an aggregation\n      var aggregation = new Maggregate(collection);\n\n      // Build and execute\n      aggregation\n        .match({'works.medium': 'paint'})\n        .unwind('$works')\n        .match({'works.medium': 'paint'})\n        .group({_id: '$_id', paintingCount: { $sum: 1 }});\n        .exec(cb);\n\n      // Or with a callback...\n      var aggregation = new Maggregate(collection);\n      aggregation\n        .match({'works.medium': 'paint'})\n        .unwind('$works')\n        .match({'works.medium': 'paint'})\n        .group({_id: '$_id', paintingCount: { $sum: 1 }}, cb);\n\n## Supported Operations\n\nCurrently, all mongo aggregation pipeline operators are supported. To learn how\nto use them, see [the documentation for them](http://docs.mongodb.org/manual/reference/operator/aggregation-nav/).\n\nAll operations map to their same name, without the `$` prefix. All operations\nare chainable, and can take a `callback` for their last argument, making the call\nto `exec` unnecessary.\n\nBriefly, the operations are:\n\n- `project`\n- `match`\n- `limit`\n- `skip`\n- `unwind`\n- `group`\n- `sort`\n- `geoNear`\n\n## Additional Methods\n\nMaggregate provides a few methods to help use the built aggregation, in addition\nto the operators specified above.\n\n#### collection <newCol>\n\nchange the collection on the aggregation. returns the chainable interface.\n\n     var writers = db.collection('writers');\n     aggregation.collection(writers).group({...});\n\n#### exec\n\nExecutes the aggregation. Takes a `callback` in the form of `function(err,\nresp)`\n\n     aggregation.group({...}).exec(function(err, resp) {\n       //Do stuff with it.\n     });\n\n#### wrap <Model>\n\nWraps the db response using the given model. Simply passes the response into the\ngiven constructor. Returns the chainable interface.\n\n     var AnalyticsReport = require('./analytics-report-model.js')\n     aggregation.wrap(AnalyticsReport);\n     \n     // ...\n     // Bunch of queries to make a complex analytics report from the collection\n     // ...\n\n     aggregation.exec(function(err, report) {\n       report instanceof AnalyticsReport === true // true\n     });\n\n",
  "readmeFilename": "README.md",
  "_id": "maggregate@0.1.0",
  "_from": "maggregate@~0.1.0"
}
