{
  "name": "modella-mongo",
  "version": "0.2.0",
  "description": "Modella Mongo persistence layer",
  "keywords": [
    "modella",
    "mongo",
    "sync"
  ],
  "scripts": {
    "test": "make test-once"
  },
  "author": {
    "name": "Ryan Schmukler",
    "email": "ryan@slingingcode.com"
  },
  "dependencies": {
    "batch": "~0.2.1",
    "debug": "~0.7.0",
    "mquery": "~0.3.2",
    "maggregate": "~0.1.0",
    "mongoskin": "~0.6.0",
    "mongodb": "~1.3.19"
  },
  "devDependencies": {
    "modella": "*",
    "mocha": "*",
    "expect.js": "*",
    "batch": "~0.2.1",
    "blanket": "~1.1.5",
    "coveralls": "~2.3.0"
  },
  "main": "index",
  "readme": "# Modella-Mongo\n[![Build Status](https://api.travis-ci.org/modella/mongo.png)](http://travis-ci.org/modella/mongo) \n[![Coverage\nStatus](https://coveralls.io/repos/modella/mongo/badge.png)](https://coveralls.io/r/modella/mongo)\n\nMongo plugin for [modella](https://github.com/modella/modella). Thinly built on\ntop of [kissjs/node-mongoskin](https://github.com/kissjs/node-mongoskin).\n\n## Installation\n\n    npm install modella-mongo\n\n## Example\n\n```js\nvar model = require('modella');\n    mongo = require('modella-mongo')('localhost/db');\n\nvar User = model('user')\n  .attr('_id')\n  .attr('name')\n  .attr('email', { unique: true })\n  .attr('password');\n\nUser.use(mongo);\n\n/**\n * Initialize\n */\n\nvar user = new User;\n\nuser.name('matt');\n\nuser.save(function(err) {\n  console.log(user.toJSON());\n});\n```\n\n## Implemented Sync Layer Methods\n\nBy adding the plugin, modella 0.2.0 compliant sync layer methods are added. This\nenables `instance#save()` and `instance#remove()` to work with mongo.\n\n## API\n\nBy loading this plugin, model inherits:\n\n### Model.db\n\nObject pointing to the raw [mongoskin](https://github.com/kissjs/node-mongoskin) database. Use it to manipulate the collection directly.\n\n### Model#index(attr, options)\n\nIndex an attribute in mongo.\n\n```js\n  User.index('email', { unique : true });\n```\n\nAlternatively, you can specify `unique: true` when defining an attribute.\n\n```js\nUser.attr('username', {unique: true});\n\n// Equivilent to...\nUser.attr('username');\nUser.index('username', {unique: true, sparse: true});\n```\n\n### Model.all(query, [options], fn)\n\nQueries for all users in the collection that match the given `query`. Additional\noptions can be passed in (eg. `{sort: {age: -1}}`). \n\nCalls `fn(err, instances)` where `instances` is an array of Model instances. If\nno queries match, `instances` will be `false`.\n\n```js\n  User.all({emailConfirmed: true}, {sort: {emailConfirmationDate: 1}}, function(err, users) {\n    console.log(\"Users with confirmed emails: \");\n    users.forEach(function(u) {\n      console.log(u.username());\n    });\n  });\n```\n\n### Model.get(query, [options], fn)\n\nQueries for one user in the collection that match the given `query`. Additional\noptions can be passed in (eg. `{sort: {age: -1}}`). \n\n`query` can also be a string, in which case it will be converted to an\n`ObjectId`.\n\nCalls `fn(err, instance)` where `instance` is an instance of Model. If\nno queries match, `instance` will be `false`.\n\n```js\n  User.get('528263fa996abeabbe000002', function(err, u) {\n    console.log(u.username());\n  });\n```\n\nCalls `fn(err, instances)` where `instances` is an array of Model instances. If\nno queries match, instances will be `false`.\n\n### Model.removeAll(query, [options], fn)\n\nRemoves all records that match the given `query`.\n\nCalls `fn(err, count)` where `count` is the number of records removed. If\nno queries match, instances will be `false`.\n\n\n```js\n  User.removeAll({emailConfirmed: false}, function(err, count) {\n    console.log(\"%d users were deleted\", count);\n  });\n```\n\n### Model.query()\n\nReturns a wrapped instances of `mquery`. See [mquery support](#mquery-support) below.\n\n### Model.aggregate()\n\nReturns a wrapped instances of `maggregate`. See [maggregate support](#maggregate-support) below.\n\n\n## mquery support\n\n`modella-mongo` provides a wrapped version of the wonderful [mquery](https://github.com/aheckmann/mquery) \nquery builder. To get it, simply call `Model.query()`.\nThis allows you to build readable and robust queries easily. When approprirate,\nmodella-mongo will return instances of `modella` models, instead of just\ndocuments. Aside from that, it follows the `mquery` API completely.\n\n### Example with mquery\n\n```js\n  User.query().findOne().where({username: 'Bob'}).exec(function(err, u) {\n    u.username() // => 'Bob'\n  });\n```\n\n## maggregate support\n\n`modella-mongo` uses the [maggregate](https://github.com/rschmukler/maggregate) \naggregation builder. To use it, simply call `Model.aggregate()`.\n\nThis allows you to build readable aggregations easily. By default it wraps\nresponses in `Model` instances, but can be disabled by passing `skipWrap` as\n`true`. It also follows the `maggregate` api completely.\n\n### Example with maggregate\n\n```js\nvar skipWrapping = true;\nUser.aggregate(skipWrapping).group({_id: '$location', locationCount: {$sum: 1}}, function(err, res) {\n  res.forEach(function(loc) {\n    console.log(\"In location %s there are %d users\", loc._id, loc.locationCount);\n  });\n});\n```\n\n## A Note about connection usage\n\nEach call to `modella-mongo` will open up a mongo connection, and return a function that can be used as a plugin for ANY Modella model. \n\nAs such it is recommended that you export the result of `modella-mongo` and then use that for all of your models.\n\n#### Example using too many connections\n\n##### models/user.js\n```js\n...\nvar mongo = require('modella-mongo')('localhost/my-db');\nUser.use(mongo);\n...\n```\n\n##### models/post.js\n```js\n...\nvar mongo = require('modella-mongo')('localhost/my-db');\nPost.use(mongo);\n...\n```\nIn the above example both the `User` and `Post` model will open a connection to the mongo database.\n\n\n#### Example of better way\n\n##### config/modella-db.js\n```js\nvar mongo = module.exports = require('modella-mongo')('localhost/my-db');\n```\n\n##### models/user.js\n```js\n...\nvar configuredDb = require('../config/modella-db');\nUser.use(configuredDb);\n...\n```\n\n##### models/post.js\n```js\n...\nvar configuredDb = require('../config/modella-db');\nPost.use(configuredDb);\n...\n```\n\nHere `modella-db.js` configures the mongo database,  and then both models use it.\n\n## License\n\nMIT\n",
  "readmeFilename": "Readme.md",
  "_id": "modella-mongo@0.2.0",
  "dist": {
    "shasum": "69f781537b5b92b88e7e6cfa1ccc227fb782fc07"
  },
  "_from": "modella-mongo@*",
  "_resolved": "https://registry.npmjs.org/modella-mongo/-/modella-mongo-0.2.0.tgz"
}
